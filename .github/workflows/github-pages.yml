on:
  workflow_dispatch:

name: Update GitHub Pages

env:
  ecr_repository: public.ecr.aws/w0m4q9l7/github-awslabs-smithy-rs-ci

# Allow only one doc pages build to run at a time for the entire smithy-rs repo
concurrency:
  group: github-pages-yml
  cancel-in-progress: true

jobs:
  save-docker-login-token:
    name: Save a docker login token
    timeout-minutes: 10
    outputs:
      docker-login-password: ${{ steps.set-token.outputs.docker-login-password }}
    permissions:
      id-token: write
      contents: read
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
    - name: Attempt to load a docker login password
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SMITHY_RS_PUBLIC_ECR_PUSH_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: us-west-2
    - name: Save the docker login password to the output
      id: set-token
      run: |
        ENCRYPTED_PAYLOAD=$(
          gpg --symmetric --batch --passphrase "${{ secrets.DOCKER_LOGIN_TOKEN_PASSPHRASE }}" --output - <(aws ecr-public get-login-password --region us-east-1) | base64 -w0
        )
        echo "docker-login-password=$ENCRYPTED_PAYLOAD" >> $GITHUB_OUTPUT

  # This job detects if the PR made changes to build tools. If it did, then it builds a new
  # build Docker image. Otherwise, it downloads a build image from Public ECR. In both cases,
  # it uploads the image as a build artifact for other jobs to download and use.
  acquire-base-image:
    name: Acquire Base Image
    needs: save-docker-login-token
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ENCRYPTED_DOCKER_PASSWORD: ${{ needs.save-docker-login-token.outputs.docker-login-password }}
      DOCKER_LOGIN_TOKEN_PASSPHRASE: ${{ secrets.DOCKER_LOGIN_TOKEN_PASSPHRASE }}
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
      with:
        path: smithy-rs
    - name: Acquire base image
      id: acquire
      env:
        DOCKER_BUILDKIT: 1
      run: ./smithy-rs/.github/scripts/acquire-build-image
    - name: Acquire credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SMITHY_RS_PUBLIC_ECR_PUSH_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: us-west-2
    - name: Upload image
      run: |
        IMAGE_TAG="$(./smithy-rs/.github/scripts/docker-image-hash)"
        docker tag "smithy-rs-base-image:${IMAGE_TAG}" "${{ env.ecr_repository }}:${IMAGE_TAG}"
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
        docker push "${{ env.ecr_repository }}:${IMAGE_TAG}"

  update-lockfiles-branch-name:
    name: Generate release branch name
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch-name-generation.outputs.branch_name }}
    steps:
    - name: Get or create release branch
      id: branch-name-generation
      shell: bash
      run: |
        update_lockfiles_branch="update-all-lockfiles-$(date +%s)"
        echo "branch_name=${update_lockfiles_branch}" > $GITHUB_OUTPUT

  push-updated-lockfiles-to-branch:
    name: push-to-branch
    needs:
    - acquire-base-image
    - update-lockfiles-branch-name
    runs-on: ubuntu-latest
    steps:
    - name: Checkout smithy-rs
      uses: actions/checkout@v4
      with:
        ref: test-automate-updating-lockfiles
        path: smithy-rs
        token: ${{ secrets.RELEASE_AUTOMATION_BOT_PAT }}
    - name: Cargo update all lockfiles
      uses: ./smithy-rs/.github/actions/docker-build
      with:
        action: cargo-update-lockfiles
        action-arguments: ${{ needs.update-lockfiles-branch-name.outputs.branch_name }}

  create-pull-request:
    name: Create pull request
    needs:
    - update-lockfiles-branch-name
    - push-updated-lockfiles-to-branch
    runs-on: ubuntu-latest
    steps:
    - name: Create pull request
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_AUTOMATION_BOT_PAT }}
        BRANCH_NAME: ${{ needs.update-lockfiles-branch-name.outputs.branch_name }}
      run: |
        echo ${BRANCH_NAME}
        echo ${{ needs.update-lockfiles-branch-name.outputs.branch_name }}
